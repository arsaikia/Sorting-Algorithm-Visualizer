{"version":3,"sources":["SortingVisualizer/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","map","value","idx","key","type","class","onClick","mergeSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56a12292.chunk.js","sourcesContent":["export function getMergeSortAnimations (array) {\r\n\tconst animations = [];\r\n\tif (array.length <= 1) return array;\r\n\tconst auxiliaryArray = array.slice();\r\n\tmergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n\treturn animations;\r\n}\r\n\r\nfunction mergeSortHelper (mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n\tif (startIdx === endIdx) return;\r\n\tconst middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n\tmergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n\tmergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n\tdoMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge (mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n\tlet k = startIdx;\r\n\tlet i = startIdx;\r\n\tlet j = middleIdx + 1;\r\n\twhile (i <= middleIdx && j <= endIdx) {\r\n\t\t// These are the values that we're comparing; we push them once\r\n\t\t// to change their color.\r\n\t\tanimations.push([ i, j ]);\r\n\t\t// These are the values that we're comparing; we push them a second\r\n\t\t// time to revert their color.\r\n\t\tanimations.push([ i, j ]);\r\n\t\tif (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n\t\t\t// We overwrite the value at index k in the original array with the\r\n\t\t\t// value at index i in the auxiliary array.\r\n\t\t\tanimations.push([ k, auxiliaryArray[i] ]);\r\n\t\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// We overwrite the value at index k in the original array with the\r\n\t\t\t// value at index j in the auxiliary array.\r\n\t\t\tanimations.push([ k, auxiliaryArray[j] ]);\r\n\t\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t\t}\r\n\t}\r\n\twhile (i <= middleIdx) {\r\n\t\t// These are the values that we're comparing; we push them once\r\n\t\t// to change their color.\r\n\t\tanimations.push([ i, i ]);\r\n\t\t// These are the values that we're comparing; we push them a second\r\n\t\t// time to revert their color.\r\n\t\tanimations.push([ i, i ]);\r\n\t\t// We overwrite the value at index k in the original array with the\r\n\t\t// value at index i in the auxiliary array.\r\n\t\tanimations.push([ k, auxiliaryArray[i] ]);\r\n\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t}\r\n\twhile (j <= endIdx) {\r\n\t\t// These are the values that we're comparing; we push them once\r\n\t\t// to change their color.\r\n\t\tanimations.push([ j, j ]);\r\n\t\t// These are the values that we're comparing; we push them a second\r\n\t\t// time to revert their color.\r\n\t\tanimations.push([ j, j ]);\r\n\t\t// We overwrite the value at index k in the original array with the\r\n\t\t// value at index j in the auxiliary array.\r\n\t\tanimations.push([ k, auxiliaryArray[j] ]);\r\n\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t}\r\n}\r\n","import React from 'react';\nimport { getMergeSortAnimations } from './sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// The value here controls the speed of the Animation:\n//larger value will speed up the process\nconst ANIMATION_SPEED_MS = 4;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 80;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#173b82';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tarray : []\n\t\t};\n\t}\n\n\tcomponentDidMount () {\n\t\tthis.resetArray();\n\t}\n\n\tresetArray () {\n\t\tconst array = [];\n\t\tfor (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n\t\t\tarray.push(randomIntFromInterval(5, 500));\n\t\t}\n\t\tthis.setState({ array });\n\t}\n\n\tmergeSort () {\n\t\tconst animations = getMergeSortAnimations(this.state.array);\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\tconst isColorChange = i % 3 !== 2;\n\t\t\tif (isColorChange) {\n\t\t\t\tconst [ barOneIdx, barTwoIdx ] = animations[i];\n\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\n\t\t\t\tconst color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst [ barOneIdx, newHeight ] = animations[i];\n\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\t\tbarOneStyle.height = `${newHeight}px`;\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t\t}\n\t\t}\n\t}\n\n\t//   quickSort() {\n\t//     // We leave it as an exercise to the viewer of this code to implement this method.\n\t//   }\n\n\t//   heapSort() {\n\t//     // We leave it as an exercise to the viewer of this code to implement this method.\n\t//   }\n\n\t//   bubbleSort() {\n\t//     // We leave it as an exercise to the viewer of this code to implement this method.\n\t//   }\n\n\t// NOTE: This method will only work if your sorting algorithms actually return\n\t// the sorted arrays; if they return the animations (as they currently do), then\n\t// this method will be broken.\n\t//   testSortingAlgorithms() {\n\t//     for (let i = 0; i < 100; i++) {\n\t//       const array = [];\n\t//       const length = randomIntFromInterval(1, 850);\n\t//       for (let i = 0; i < length; i++) {\n\t//         array.push(randomIntFromInterval(-1000, 1000));\n\t//       }\n\t//       const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n\t//       const mergeSortedArray = getMergeSortAnimations(array.slice());\n\t//       console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n\t//     }\n\t//   }\n\n\trender () {\n\t\tconst { array } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"array-container\">\n\t\t\t\t{array.map((value, idx) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"array-bar\"\n\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tbackgroundColor : PRIMARY_COLOR,\n\t\t\t\t\t\t\theight          : `${value}px`\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t\t<div className=\"ButtonSpace\"> </div>\n\n\t\t\t\t<button type=\"button\" class=\"btn btn-primary\" onClick={() => this.resetArray()}>\n\t\t\t\t\tGenerate Random Array\n\t\t\t\t</button>\n\t\t\t\t<button type=\"button\" class=\"btn btn-success\" onClick={() => this.mergeSort()}>\n\t\t\t\t\tMerge Sort\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval (min, max) {\n\t// min and max included\n\treturn Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// function arraysAreEqual(arrayOne, arrayTwo) {\n//   if (arrayOne.length !== arrayTwo.length) return false;\n//   for (let i = 0; i < arrayOne.length; i++) {\n//     if (arrayOne[i] !== arrayTwo[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n","import React from 'react';\n//import logo from './logo.svg';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App () {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SortingVisualizer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}